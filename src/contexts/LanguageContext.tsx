import React, { createContext, useState, useContext, ReactNode } from 'react';
import { Role } from '@/types/app'; // Import Role type

type Language = 'en' | 'th';

interface Translation {
  [key: string]: {
    en: string | string[] | { [key: string]: string };
    th: string | string[] | { [key: string]: string };
  };
}

const translations: Translation = {
  'boss': { en: 'Boss', th: '‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢' },
  'assistant': { en: 'Assistant', th: '‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢' },
  'i_am_the_boss': { en: 'I am the Boss', th: '‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢' },
  'i_am_the_assistant': { en: 'I am the Assistant', th: '‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢' },
  'select_your_role': { en: 'Select Your Role', th: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' },
  'appointments': { en: 'Appointments', th: '‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢' },
  'calls': { en: 'Calls', th: '‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£' },
  'shopping': { en: 'Shopping', th: '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á' },
  'health': { en: 'Health', th: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' },
  'food': { en: 'Food', th: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
  'cleaning': { en: 'Cleaning', th: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î' },
  'productivity': { en: 'Productivity', th: '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û' },
  'salary_logs': { en: 'Salary & Logs', th: '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' },
  'english': { en: 'English', th: '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' },
  'thai': { en: 'Thai', th: '‡πÑ‡∏ó‡∏¢' },
  'welcome_to_boss_care': { en: 'Welcome to BossCare', th: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà BossCare' },
  'select_a_role_to_continue': { en: 'Please select a role to continue.', th: '‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠' },
  'app_description': { en: 'Your personal assistant coordination dashboard for health, tasks, and productivity.', th: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û' },
  'app_name': { en: 'BossCare ‚Äì Assistant Task & Wellness Tracker', th: 'BossCare ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢' },
  'add_a_note': { en: 'Add a note...', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' },
  'add_note': { en: 'Add Note', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' },
  'note_added_successfully': { en: 'Note added successfully!', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' },
  'no_notes_yet': { en: 'No notes yet.', th: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' },
  'notes_history': { en: 'Notes History', th: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' },
  'added_by': { en: 'Added by', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢' },
  'add_appointment_note': { en: 'Add a note about appointments...', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢...' },
  'deleted': { en: 'Deleted', th: '‡∏ñ‡∏π‡∏Å‡∏•‡∏ö' },

  // New content from UI Copy & Content Pack
  'motivational_messages': {
    en: [
      "Helping him focus helps both of you move forward.",
      "The calmer he is, the more space you both have to breathe.",
      "Your care keeps his head clear ‚Äî and that matters.",
      "Quiet mornings, smooth afternoons ‚Äî you‚Äôre part of what makes it happen.",
      "Little things add up. He sees it, even if he‚Äôs busy.",
      "You‚Äôre not just assisting ‚Äî you‚Äôre his balance.",
      "Make him feel settled today. Everything else falls into place."
    ],
    th: [
      "‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏Å‡πâ‡∏≤‡∏ß‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤",
      "‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡∏≤‡∏™‡∏á‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏Å‡πá‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡πÉ‡∏à‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏°‡∏µ‡∏™‡∏ï‡∏¥ ‚Äî ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
      "‡πÄ‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö ‡∏ö‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô ‚Äî ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
      "‡∏™‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà ‡πÄ‡∏Ç‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏°‡∏±‡∏ô ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡∏¢‡∏∏‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πá‡∏ï‡∏≤‡∏°",
      "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚Äî ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤",
      "‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏á"
    ]
  },
  'assistant_dashboard_tips': {
    en: {
      cleaning: "Keep the space tidy and chill ‚Äî it helps him focus.",
      health: "If he‚Äôs in pain, don‚Äôt overdo it. Just be around, be calm.",
      food: "Make sure there‚Äôs something ready before he needs to ask.",
      shopping: "Think about what would make life easier for him today.",
      productivity: "How did you make his day easier or lighter today?"
    },
    th: {
      cleaning: "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ ‚Äî ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ò‡∏¥",
      health: "‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏≤‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î ‡∏≠‡∏¢‡πà‡∏≤‡∏´‡∏±‡∏Å‡πÇ‡∏´‡∏° ‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ö",
      food: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠",
      shopping: "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏Ç‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
      productivity: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≤‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?"
    }
  },
  'boss_note_prompts': {
    en: [
      "Want to leave her a note? Doesn‚Äôt need to be deep.",
      "Just say thanks, or tell her she did good.",
      "Let her know you noticed what she did today."
    ],
    th: [
      "‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÑ‡∏´‡∏°? ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ",
      "‡πÅ‡∏Ñ‡πà‡∏ö‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ò‡∏≠‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ",
      "‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏ó‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    ]
  },
  'assistant_note_prompts': {
    en: [
      "Anything he should know? Or just something kind?",
      "Drop a reminder or a little update."
    ],
    th: [
      "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ‡πÑ‡∏´‡∏°? ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏î‡∏µ‡πÜ?",
      "‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    ]
  },
  'quick_mood_labels': {
    en: [
      "‚úÖ Focused",
      "üòê Distracted",
      "üòì In Pain",
      "üõãÔ∏è Low Energy",
      "üéØ Locked In"
    ],
    th: [
      "‚úÖ ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ò‡∏¥",
      "üòê ‡∏ß‡∏≠‡∏Å‡πÅ‡∏ß‡∏Å",
      "üòì ‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î",
      "üõãÔ∏è ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥",
      "üéØ ‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô"
    ]
  },
  'daily_checkin_prompt': {
    en: {
      assistant: "What did you do today that helped him? Could be big or small.",
      boss: "Anything she did today that made things easier? Leave a quick note."
    },
    th: {
      assistant: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏≤‡∏ö‡πâ‡∏≤‡∏á? ‡∏à‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡∏ç‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ",
      boss: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ò‡∏≠‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏á? ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ"
    }
  },
  'win_of_the_day_examples': {
    en: [
      "Handled all the food stuff without being asked.",
      "Kept the place really quiet while he worked.",
      "Noticed he was tense and gave him space.",
      "Found something he needed online.",
      "Made sure he ate before a call."
    ],
    th: [
      "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≠",
      "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
      "‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
      "‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
      "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏≤‡∏Å‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£"
    ]
  },
  'private_message_examples': {
    en: [
      "He looked tired today. Maybe remind him to stretch?",
      "She‚Äôs been doing extra lately. Leave her something sweet."
    ],
    th: [
      "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡∏≤‡∏î‡∏π‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏¢‡∏∑‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏∑‡∏î‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏°?",
      "‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ò‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏ó‡∏¥‡πâ‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏ß‡∏≤‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢"
    ]
  },
  'bonus_tracker_text': {
    en: {
      current: "Tasks done today: ",
      status: "You‚Äôre on track for the weekly bonus. Keep it up!"
    },
    th: {
      current: "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ",
      status: "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏™‡∏π‡πâ‡πÜ!"
    }
  },
  'language_toggle_tip': { en: "Switch between English and Thai ‚Äî everything updates automatically.", th: "‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‚Äî ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" },
  'logout_message': { en: "Done for now? You can log out or just leave it open.", th: "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ" },
  'footer_text': { en: "Built for two people who make each other better.", th: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô" },
  'good_morning': { en: 'Good morning', th: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤' },
  'good_afternoon': { en: 'Good afternoon', th: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢' },
  'good_evening': { en: 'Good evening', th: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô' },
  'todays_top_tasks': { en: 'Today‚Äôs Top Tasks', th: '‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô' },
  'add_new_task': { en: 'Add a new task...', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...' },
  'add_task': { en: 'Add Task', th: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô' },
  'done': { en: 'Done', th: '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' },
  'in_progress': { en: 'In Progress', th: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' },
  'missed': { en: 'Missed', th: '‡∏û‡∏•‡∏≤‡∏î' },
  'status': { en: 'Status', th: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' },
  'task_update_note': { en: 'This automatically updates the boss‚Äôs view.', th: '‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' },
  'pain_mode_on': { en: 'Pain Mode ON', th: '‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' },
  'pain_mode_banner_message': { en: 'Boss is in pain today. Prioritize wellness + quiet.', th: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö' },
  'view_edit_history': { en: 'View Edit History', th: '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' },
  'history': { en: 'History', th: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' },
  'history_description': { en: 'Review changes made to this section.', th: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ' },
  'no_history_yet': { en: 'No history yet.', th: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' },
  'close': { en: 'Close', th: '‡∏õ‡∏¥‡∏î' },
};

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
  getDailyMotivationalPhrase: () => string;
  getAssistantDashboardTip: (tab: string) => string;
  getNotePrompt: (role: Role) => string;
  getQuickMoodLabels: () => string[];
  getDailyCheckinPrompt: (role: Role) => string;
  getWinOfTheDayExamples: () => string[];
  getPrivateMessageExamples: () => string[];
  getBonusTrackerText: (key: 'current' | 'status') => string;
  getLanguageToggleTip: () => string;
  getLogoutMessage: () => string;
  getFooterText: () => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguage] = useState<Language>('en'); // Default to English

  const t = (key: string): string => {
    const translation = translations[key];
    if (!translation) {
      console.warn(`Missing translation for key: ${key}`);
      return key; // Fallback to key if not found
    }
    const value = translation[language];
    if (typeof value !== 'string') {
      console.warn(`Translation for key '${key}' is not a string, but t() expects a string.`);
      return key; // Return key or a generic message for misuse
    }
    return value;
  };

  const getDailyMotivationalPhrase = (): string => {
    const phrases = translations['motivational_messages'][language];
    if (!Array.isArray(phrases)) {
      console.error("Motivational messages are not an array as expected.");
      return "Error: Motivational phrase not found.";
    }
    const dayOfYear = Math.floor((new Date().getTime() - new Date(new Date().getFullYear(), 0, 0).getTime()) / 1000 / 60 / 60 / 24);
    return phrases[dayOfYear % phrases.length];
  };

  const getAssistantDashboardTip = (tab: string): string => {
    const tips = translations['assistant_dashboard_tips'][language];
    if (typeof tips !== 'object' || Array.isArray(tips) || !(tab in tips)) {
      console.error(`Assistant dashboard tip for tab '${tab}' not found or not an object.`);
      return `Tip for ${tab} not found.`;
    }
    return tips[tab];
  };

  const getNotePrompt = (role: Role): string => {
    const prompts = translations[`${role}_note_prompts`][language];
    if (!Array.isArray(prompts)) {
      console.error(`Note prompts for role '${role}' are not an array as expected.`);
      return "Add a note...";
    }
    const randomIndex = Math.floor(Math.random() * prompts.length);
    return prompts[randomIndex];
  };

  const getQuickMoodLabels = (): string[] => {
    const labels = translations['quick_mood_labels'][language];
    if (!Array.isArray(labels)) {
      console.error("Quick mood labels are not an array as expected.");
      return [];
    }
    return labels;
  };

  const getDailyCheckinPrompt = (role: Role): string => {
    const prompts = translations['daily_checkin_prompt'][language];
    if (typeof prompts !== 'object' || Array.isArray(prompts) || !(role in prompts)) {
      console.error(`Daily check-in prompt for role '${role}' not found or not an object.`);
      return "Daily check-in prompt not found.";
    }
    return prompts[role];
  };

  const getWinOfTheDayExamples = (): string[] => {
    const examples = translations['win_of_the_day_examples'][language];
    if (!Array.isArray(examples)) {
      console.error("Win of the day examples are not an array as expected.");
      return [];
    }
    return examples;
  };

  const getPrivateMessageExamples = (): string[] => {
    const examples = translations['private_message_examples'][language];
    if (!Array.isArray(examples)) {
      console.error("Private message examples are not an array as expected.");
      return [];
    }
    return examples;
  };

  const getBonusTrackerText = (key: 'current' | 'status'): string => {
    const text = translations['bonus_tracker_text'][language];
    if (typeof text !== 'object' || Array.isArray(text) || !(key in text)) {
      console.error(`Bonus tracker text for key '${key}' not found or not an object.`);
      return `Bonus text for ${key} not found.`;
    }
    return text[key];
  };

  const getLanguageToggleTip = (): string => t('language_toggle_tip');
  const getLogoutMessage = (): string => t('logout_message');
  const getFooterText = (): string => t('footer_text');

  return (
    <LanguageContext.Provider value={{
      language,
      setLanguage,
      t,
      getDailyMotivationalPhrase,
      getAssistantDashboardTip,
      getNotePrompt,
      getQuickMoodLabels,
      getDailyCheckinPrompt,
      getWinOfTheDayExamples,
      getPrivateMessageExamples,
      getBonusTrackerText,
      getLanguageToggleTip,
      getLogoutMessage,
      getFooterText
    }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};